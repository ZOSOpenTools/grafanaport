diff --git a/backend_inotify.go b/backend_inotify.go
index e6ef288..287fb5d 100644
--- a/backend_inotify.go
+++ b/backend_inotify.go
@@ -1,4 +1,5 @@
-//go:build linux && !appengine
+//go:build linux && !appengine || zos
+// build linux,!appengine zos

 package fsnotify

diff --git a/backend_other.go b/backend_other.go
index 5eb5dbc..69f6d02 100644
--- a/backend_other.go
+++ b/backend_other.go
@@ -1,4 +1,5 @@
-//go:build appengine || (!darwin && !dragonfly && !freebsd && !openbsd && !linux && !netbsd && !solaris && !windows)
+//go:build appengine || (!darwin && !dragonfly && !freebsd && !openbsd && !linux && !netbsd && !solaris && !windows && !zos)
+// build !darwin,!dragonfly,!freebsd,!openbsd,!linux,!netbsd,!solaris,!windows,!zos

 package fsnotify

diff --git a/internal/debug_zos.go b/internal/debug_zos.go
new file mode 100644
index 0000000..61900ab
--- /dev/null
+++ b/internal/debug_zos.go
@@ -0,0 +1,63 @@
+package internal
+
+import (
+       "fmt"
+       "os"
+       "strings"
+       "time"
+
+    "syscall"
+)
+
+func Debug(name string, mask uint32) {
+       names := []struct {
+               n string
+               m uint32
+       }{
+               {"IN_ACCESS", syscall.IN_ACCESS},
+               {"IN_ALL_EVENTS", syscall.IN_ALL_EVENTS},
+               {"IN_ATTRIB", syscall.IN_ATTRIB},
+               {"IN_CLASSA_HOST", syscall.IN_CLASSA_HOST},
+               {"IN_CLASSA_MAX", syscall.IN_CLASSA_MAX},
+               {"IN_CLASSA_NET", syscall.IN_CLASSA_NET},
+               {"IN_CLASSA_NSHIFT", syscall.IN_CLASSA_NSHIFT},
+               {"IN_CLASSB_HOST", syscall.IN_CLASSB_HOST},
+               {"IN_CLASSB_MAX", syscall.IN_CLASSB_MAX},
+               {"IN_CLASSB_NET", syscall.IN_CLASSB_NET},
+               {"IN_CLASSB_NSHIFT", syscall.IN_CLASSB_NSHIFT},
+               {"IN_CLASSC_HOST", syscall.IN_CLASSC_HOST},
+               {"IN_CLASSC_NET", syscall.IN_CLASSC_NET},
+               {"IN_CLASSC_NSHIFT", syscall.IN_CLASSC_NSHIFT},
+               {"IN_CLOSE", syscall.IN_CLOSE},
+               {"IN_CLOSE_NOWRITE", syscall.IN_CLOSE_NOWRITE},
+               {"IN_CLOSE_WRITE", syscall.IN_CLOSE_WRITE},
+               {"IN_CREATE", syscall.IN_CREATE},
+               {"IN_DELETE", syscall.IN_DELETE},
+               {"IN_DELETE_SELF", syscall.IN_DELETE_SELF},
+               {"IN_DONT_FOLLOW", syscall.IN_DONT_FOLLOW},
+               {"IN_EXCL_UNLINK", syscall.IN_EXCL_UNLINK},
+               {"IN_IGNORED", syscall.IN_IGNORED},
+               {"IN_ISDIR", syscall.IN_ISDIR},
+               {"IN_LOOPBACKNET", syscall.IN_LOOPBACKNET},
+               {"IN_MASK_ADD", syscall.IN_MASK_ADD},
+               {"IN_MASK_CREATE", syscall.IN_MASK_CREATE},
+               {"IN_MODIFY", syscall.IN_MODIFY},
+               {"IN_MOVE", syscall.IN_MOVE},
+               {"IN_MOVED_FROM", syscall.IN_MOVED_FROM},
+               {"IN_MOVED_TO", syscall.IN_MOVED_TO},
+               {"IN_MOVE_SELF", syscall.IN_MOVE_SELF},
+               {"IN_ONESHOT", syscall.IN_ONESHOT},
+               {"IN_ONLYDIR", syscall.IN_ONLYDIR},
+               {"IN_OPEN", syscall.IN_OPEN},
+               {"IN_Q_OVERFLOW", syscall.IN_Q_OVERFLOW},
+               {"IN_UNMOUNT", syscall.IN_UNMOUNT},
+       }
+
+       var l []string
+       for _, n := range names {
+               if mask&n.m == n.m {
+                       l = append(l, n.n)
+               }
+       }
+       fmt.Fprintf(os.Stderr, "%s  %-20s â†’ %s\n", time.Now().Format("15:04:05.0000"), strings.Join(l, " | "), name)
+}
